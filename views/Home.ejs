<style>
    .container {
        display: flex;
        gap: 20px;
    }

    #map {
        width: 70%;
        height: 600px;
        margin-bottom: 20px;
    }

    #location-list {
        overflow-y: scroll;
        height: 200px;
        border-radius: 20px;
        list-style-type: none;
        padding: 0;
        margin-bottom: 20px;
    }

    #location-list li {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        margin: 5px;
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    #location-list li:hover {
        background-color: #f0f0f0;
    }

    .actions {
        display: flex;
        gap: 10px;
    }

    .edit-btn {
        background-color: #007bff;
        color: white;
        text-decoration: none;
        padding: 5px 10px;
        border-radius: 5px;
    }

    .delete-btn {
        background-color: #dc3545;
        color: white;
        padding: 5px 10px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
    }

    button.add-location {
        padding: 10px 15px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    button.add-location a {
        color: white;
        text-decoration: none;
    }

    .list-content {
        width: 30%;
        padding: 5px;
    }

    @media (max-width: 768px) {
        .container {
            flex-direction: column;
        }

        #map {
            width: 100%;
            height: 300px;
        }

        #location-list {
            height: auto;
            max-height: 300px;
        }

        .add-location {
            width: 100%;
            text-align: center;
        }

        #location-list li {
            flex-direction: column;
            align-items: flex-start;
            gap: 5px;
        }

        .actions {
            justify-content: flex-start;
            width: 100%;
        }

        .list-content {
            width: 100%;
        }
    }
</style>

<h1>Home</h1>

<div class="container">
    <div id="map"></div>

    <div class="list-content">
        <button class="add-location" title="Add Location">
            <a href="/create" style="color:white; text-decoration:none;">Add Location</a>
        </button>

        <h1>List Location</h1>

        <ul id="location-list">
            <% for (const location of locations) { %>
                <li data-id="<%= location.id %>" data-latitude="<%= location.latitude %>"
                    data-longitude="<%= location.longitude %>" data-name="<%= location.name %>"
                    data-address="<%= location.address %>">
                    <span>
                        <%= location.name %>
                    </span>
                    <div class="actions">
                        <a class="edit-btn" href="/update/<%= location.id %>">Edit</a>
                        <form action="/delete/<%= location.id %>?_method=DELETE" method="POST" style="display:inline;">
                            <button type="submit" class="delete-btn">Delete</button>
                        </form>
                    </div>
                </li>
                <% } %>
        </ul>
    </div>

</div>

<script async defer src="https://maps.googleapis.com/maps/api/js?key=<%- apiKey %>&callback=initMap"></script>
<script>
    let map;

    async function getAddressFromLatLng(lat, lng) {
        const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lng}&format=json`;
        try {
            const response = await fetch(url);
            const data = await response.json();
            const address = data.address
                ? `${data.address.city || ''}, ${data.address.country || ''}`
                : 'No address found';
            return address;
        } catch (err) {
            console.error('Geocoding error:', err);
            return 'Unable to retrieve address';
        }
    }

    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: -6.917464, lng: 107.619125 },
            zoom: 8
        });

        const locations = JSON.parse('<%- JSON.stringify(locations) %>');

        locations.forEach(async (location) => {
            const { latitude, longitude, name, address, description } = location;
            const region = await getAddressFromLatLng(location.latitude, location.longitude);
            const marker = new google.maps.Marker({
                position: { lat: location.latitude, lng: location.longitude },
                map,
                title: location.name
            });

            const infoWindow = new google.maps.InfoWindow({
                content: `<b>${location.name}</b><br>${location.address}<br>${description}<br>${region}`
            });

            marker.addListener('click', () => {
                infoWindow.open(map, marker);
                map.setCenter(marker.getPosition());
                map.setZoom(15);
            });
        });
    }

    document.getElementById('location-list').addEventListener('click', (event) => {
        const listItem = event.target.closest('li');
        if (listItem) {
            const latitude = parseFloat(listItem.getAttribute('data-latitude'));
            const longitude = parseFloat(listItem.getAttribute('data-longitude'));

            map.setCenter({ lat: latitude, lng: longitude });

        }
    });
</script>